# import the JSON utility package
import json
# import the Python math library
import math

# import the AWS SDK (for Python the package name is boto3)
import boto3
# import two packages to help us with dates and date formatting
from time import gmtime, strftime

# create a DynamoDB object using the AWS SDK
dynamodb = boto3.resource('dynamodb')
# use the DynamoDB object to select our table
table = dynamodb.Table('calculator')
# store the current time in a human readable format in a variable
now = strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())

# Define the Lambda function
def lambda_handler(event, context):
    # Extract numbers and operator from the event object
    num1 = float(event['num1'])
    num2 = float(event['num2'])
    operator = event['operator']
    
    # Perform the calculation based on the operator
    try:
        if operator == '+':
            result = num1 + num2
        elif operator == '-':
            result = num1 - num2
        elif operator == '*':
            result = num1 * num2
        elif operator == "**":
            result = math.pow(num1, num2)
        elif operator == '/':
            if num2 == 0:
                return {
                    'statusCode': 400,
                    'body': json.dumps('Error: Division by zero')
                }
            result = num1 / num2
        else:
            return {
                'statusCode': 400,
                'body': json.dumps('Error: Invalid operator')
            }
        
        # Return the result formatted as JSON
        return {
            'statusCode': 200,
            'body': json.dumps("Your result is: " + str(result))
        }
        # write result and time to the DynamoDB table using the object we instantiated and save response in a variable
        response = table.put_item(
            Item={
                'ID': str(result),
                'LatestGreetingTime':now
                })

        # return a properly formatted JSON object
        return {
        'statusCode': 200,
        'body': json.dumps('Your result is: ' + str(result))
        }
        
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps(f'Error: {str(e)}')
        }
